
import java.awt.Component;
import java.awt.event.KeyEvent;
import java.util.List;

import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;


/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author Mateus Moreira Fonseca RA:1426885
 */
public class ConsultaContas extends javax.swing.JFrame {

    private static ConsultaContas instancia;

    public ConsultaContas() {
        initComponents();
        cxNumeroConta.requestFocus();
        setResizable(false);
        setLocationRelativeTo(null);

    }

    public static ConsultaContas getInstance() {
        if (instancia == null) {
            instancia = new ConsultaContas();
        }
        return instancia;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        rotTituloPaginaConsultar = new javax.swing.JLabel();
        btSair = new javax.swing.JButton();
        Separador = new javax.swing.JSeparator();
        cxNumeroConta = new javax.swing.JTextField();
        txNumeroConta = new javax.swing.JLabel();
        btPesquisar = new javax.swing.JButton();
        PainelContas = new javax.swing.JScrollPane();
        tbContas = new javax.swing.JTable();
        btDeletar = new javax.swing.JButton();
        btDetalhes = new javax.swing.JButton();
        btLimpar = new javax.swing.JButton();
        Corrente = new javax.swing.JRadioButton();
        PoupancaEspecial = new javax.swing.JRadioButton();
        Poupanca = new javax.swing.JRadioButton();
        txTipo = new javax.swing.JLabel();
        TodasContas = new javax.swing.JRadioButton();
        btEditar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        rotTituloPaginaConsultar.setFont(new java.awt.Font("Segoe UI", 2, 24)); // NOI18N
        rotTituloPaginaConsultar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        rotTituloPaginaConsultar.setText("| Consulta de Contas |");

        btSair.setText("Sair");
        btSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSairActionPerformed(evt);
            }
        });

        cxNumeroConta.setToolTipText("");
        cxNumeroConta.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cxNumeroContaFocusGained(evt);
            }
        });
        cxNumeroConta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cxNumeroContaKeyTyped(evt);
            }
        });

        txNumeroConta.setText("Numero da Conta:");

        btPesquisar.setText("Pesquisar");
        btPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btPesquisarActionPerformed(evt);
            }
        });

        PainelContas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                PainelContasMouseClicked(evt);
            }
        });

        tbContas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Numero da Conta", "Agencia:", "Tipo"
            }
        ));
        tbContas.setColumnSelectionAllowed(true);
        tbContas.getTableHeader().setReorderingAllowed(false);
        PainelContas.setViewportView(tbContas);
        tbContas.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        btDeletar.setText("Deletar");
        btDeletar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btDeletarMouseClicked(evt);
            }
        });
        btDeletar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDeletarActionPerformed(evt);
            }
        });

        btDetalhes.setText("Exibir Detalhes de Conta");
        btDetalhes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDetalhesActionPerformed(evt);
            }
        });

        btLimpar.setText("Limpar Filtro");
        btLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLimparActionPerformed(evt);
            }
        });

        buttonGroup1.add(Corrente);
        Corrente.setText("Corrente");
        Corrente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CorrenteActionPerformed(evt);
            }
        });

        buttonGroup1.add(PoupancaEspecial);
        PoupancaEspecial.setText("Poupança Especial");
        PoupancaEspecial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PoupancaEspecialActionPerformed(evt);
            }
        });

        buttonGroup1.add(Poupanca);
        Poupanca.setText("Poupança");
        Poupanca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PoupancaActionPerformed(evt);
            }
        });

        txTipo.setText("Tipo:");

        buttonGroup1.add(TodasContas);
        TodasContas.setSelected(true);
        TodasContas.setText("Todos");
        TodasContas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TodasContasActionPerformed(evt);
            }
        });

        btEditar.setText("Editar");
        btEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEditarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(rotTituloPaginaConsultar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Poupanca)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Corrente))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(PoupancaEspecial)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TodasContas))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txTipo)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txNumeroConta)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cxNumeroConta, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(btPesquisar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btLimpar, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 74, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btDetalhes)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btEditar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btDeletar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btSair))
                    .addComponent(PainelContas, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 493, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addComponent(Separador, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rotTituloPaginaConsultar, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Separador, javax.swing.GroupLayout.PREFERRED_SIZE, 3, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(PainelContas, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btDeletar)
                            .addComponent(btSair)
                            .addComponent(btDetalhes)
                            .addComponent(btEditar))
                        .addGap(12, 12, 12))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addComponent(txTipo)
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(Poupanca)
                                    .addComponent(Corrente)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(cxNumeroConta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txNumeroConta)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(PoupancaEspecial)
                            .addComponent(TodasContas))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btPesquisar)
                            .addComponent(btLimpar))
                        .addGap(26, 106, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSairActionPerformed
        dispose();
        Principal principal = Principal.getInstance();
        principal.setVisible(true);
        limparTabela();
    }//GEN-LAST:event_btSairActionPerformed

    private void btPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btPesquisarActionPerformed
        pesquisar();
        cxNumeroConta.requestFocus();
    }//GEN-LAST:event_btPesquisarActionPerformed

    private void btDeletarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDeletarActionPerformed

    }//GEN-LAST:event_btDeletarActionPerformed

    private void btDeletarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btDeletarMouseClicked
        deletar();
    }//GEN-LAST:event_btDeletarMouseClicked

    private void cxNumeroContaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cxNumeroContaKeyTyped

        limitarTamanhoCampo(6, cxNumeroConta, evt);

    }//GEN-LAST:event_cxNumeroContaKeyTyped

    private void btDetalhesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDetalhesActionPerformed
        detalhes();
    }//GEN-LAST:event_btDetalhesActionPerformed

    private void cxNumeroContaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cxNumeroContaFocusGained
        cxNumeroConta.selectAll();
    }//GEN-LAST:event_cxNumeroContaFocusGained

    private void btLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLimparActionPerformed
        limparCampo(cxNumeroConta);
        limparTabela();
        TodasContas.setSelected(true);


    }//GEN-LAST:event_btLimparActionPerformed

    private void btEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEditarActionPerformed

        editarRegistro();
    }//GEN-LAST:event_btEditarActionPerformed


    private void CorrenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CorrenteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CorrenteActionPerformed

    private void PoupancaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PoupancaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PoupancaActionPerformed

    private void PoupancaEspecialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PoupancaEspecialActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PoupancaEspecialActionPerformed

    private void TodasContasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TodasContasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TodasContasActionPerformed

    private void PainelContasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PainelContasMouseClicked

    }//GEN-LAST:event_PainelContasMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton Corrente;
    private javax.swing.JScrollPane PainelContas;
    private javax.swing.JRadioButton Poupanca;
    private javax.swing.JRadioButton PoupancaEspecial;
    private javax.swing.JSeparator Separador;
    private javax.swing.JRadioButton TodasContas;
    private javax.swing.JButton btDeletar;
    private javax.swing.JButton btDetalhes;
    private javax.swing.JButton btEditar;
    private javax.swing.JButton btLimpar;
    private javax.swing.JButton btPesquisar;
    private javax.swing.JButton btSair;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTextField cxNumeroConta;
    private javax.swing.JLabel rotTituloPaginaConsultar;
    private javax.swing.JTable tbContas;
    private javax.swing.JLabel txNumeroConta;
    private javax.swing.JLabel txTipo;
    // End of variables declaration//GEN-END:variables

    void limparTabela() {

        DefaultTableModel model = (DefaultTableModel) tbContas.getModel();
        model.setRowCount(0);

    }

    private void limparCampo(Component componente) {
        if (componente instanceof JTextField) {
            JTextField textField = (JTextField) componente;
            textField.setText("");
        } else if (componente instanceof JPasswordField) {
            JPasswordField passwordField = (JPasswordField) componente;
            passwordField.setText("");
        }
    }

    private void limitarTamanhoCampo(int tamanhoMaximo, JTextField campo, java.awt.event.KeyEvent evt) {
        int k = evt.getKeyChar();
        if ((k > 47 && k < 58)) {
            if (campo.getText().length() == tamanhoMaximo) {
                evt.setKeyChar((char) KeyEvent.VK_CLEAR);
            }
        } else {
            evt.setKeyChar((char) KeyEvent.VK_CLEAR);
        }
    }

    public void pesquisar() {
        String numeroConta = cxNumeroConta.getText();

        if (numeroConta.isEmpty()) {
            if (TodasContas.isSelected()) {
                limparTabela();
                todasContas();
            } else if (Corrente.isSelected()) {
                limparTabela();
                preencheTabelaCorrente();
            } else if (Poupanca.isSelected()) {

                limparTabela();
                preencherTabelaPoupanca();
            } else if (PoupancaEspecial.isSelected()) {
                limparTabela();
                preeencherTabelaPoupancaEspecial();
            }
            return;
        }

        BancoContas banco = BancoContas.getBanco();

        if (Corrente.isSelected()) {
            Conta conta = banco.getContaByNumero(numeroConta);
            if (conta != null && conta instanceof ContaCorrente) {
                ContaCorrente contaCorrente = (ContaCorrente) conta;
                limparTabela();
                DefaultTableModel model = (DefaultTableModel) tbContas.getModel();
                Object[] rowData = {contaCorrente.getNumero(), contaCorrente.getAgencia(), "Conta Corrente"};
                model.addRow(rowData);
            } else {
                limparTabela();
                JOptionPane.showMessageDialog(this, "Conta corrente não encontrada.");
            }
        } else if (Poupanca.isSelected()) {
            Conta conta = banco.getContaByNumero(numeroConta);
            if (conta != null && conta instanceof ContaPoupanca && !(conta instanceof ContaPoupancaEspecial)) {
                ContaPoupanca contaPoupanca = (ContaPoupanca) conta;
                limparTabela();
                DefaultTableModel model = (DefaultTableModel) tbContas.getModel();
                Object[] rowData = {contaPoupanca.getNumero(), contaPoupanca.getAgencia(), "Conta Poupança"};
                model.addRow(rowData);
            } else {
                limparTabela();
                JOptionPane.showMessageDialog(this, "Conta poupança não encontrada.");
            }
        } else if (PoupancaEspecial.isSelected()) {
            Conta conta = banco.getContaByNumero(numeroConta);
            if (conta != null && conta instanceof ContaPoupancaEspecial) {
                ContaPoupancaEspecial contaPoupancaEspecial = (ContaPoupancaEspecial) conta;
                limparTabela();
                DefaultTableModel model = (DefaultTableModel) tbContas.getModel();
                Object[] rowData = {contaPoupancaEspecial.getNumero(), contaPoupancaEspecial.getAgencia(), "Conta Poupança Especial"};
                model.addRow(rowData);
            } else {
                limparTabela();
                JOptionPane.showMessageDialog(this, "Conta poupança especial não encontrada.");
            }
        } else if (TodasContas.isSelected()) {
            String numeroContaPesquisada = cxNumeroConta.getText();

            limparTabela();
            DefaultTableModel model = (DefaultTableModel) tbContas.getModel();

            for (ContaCorrente contaCorrente : banco.getBdContasCorrente()) {
                if (contaCorrente.getNumero().equals(numeroContaPesquisada)) {
                    Object[] rowData = {contaCorrente.getNumero(), contaCorrente.getAgencia(), "Conta Corrente"};
                    model.addRow(rowData);
                    break;
                }
            }

            for (ContaPoupanca contaPoupanca : banco.getBdContasPoupanca()) {
                if (contaPoupanca.getNumero().equals(numeroContaPesquisada)) {
                    if (contaPoupanca instanceof ContaPoupancaEspecial) {
                        ContaPoupancaEspecial contaPoupancaEspecial = (ContaPoupancaEspecial) contaPoupanca;
                        Object[] rowData = {contaPoupancaEspecial.getNumero(), contaPoupancaEspecial.getAgencia(), "Conta Poupança Especial"};
                        model.addRow(rowData);
                    } else {
                        Object[] rowData = {contaPoupanca.getNumero(), contaPoupanca.getAgencia(), "Conta Poupança"};
                        model.addRow(rowData);
                    }
                    break;
                }
            }

            for (ContaPoupancaEspecial contaPoupancaEspecial : banco.getBdContasPoupancaEspecial()) {
                if (contaPoupancaEspecial.getNumero().equals(numeroContaPesquisada)) {
                    Object[] rowData = {contaPoupancaEspecial.getNumero(), contaPoupancaEspecial.getAgencia(), "Conta Poupança Especial"};
                    model.addRow(rowData);
                    break;
                }
            }
            if (model.getRowCount() == 0) {
                JOptionPane.showMessageDialog(this, "Nenhuma conta encontrada com o número: " + numeroContaPesquisada);
            }
        }
    }

    private void deletar() {
        int selectedRow = tbContas.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Nenhuma conta selecionada", "Deletar Conta", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String numeroConta = (String) tbContas.getValueAt(selectedRow, 0);
        String agencia = (String) tbContas.getValueAt(selectedRow, 1);
        String tipoConta = (String) tbContas.getValueAt(selectedRow, 2);

        String message = "<html><b>Número da Conta:</b> " + numeroConta + "<br><b>Agência:</b> " + agencia + "<br><br>Tem certeza que deseja deletar a conta?</html>";

        int option = JOptionPane.showConfirmDialog(this, message, "Deletar Conta", JOptionPane.YES_NO_OPTION);
        if (option == JOptionPane.YES_OPTION) {
            BancoContas banco = BancoContas.getBanco();
            boolean contaDeletada = banco.excluirConta(numeroConta);

            if (contaDeletada) {
                DefaultTableModel model = (DefaultTableModel) tbContas.getModel();
                model.removeRow(selectedRow);
                JOptionPane.showMessageDialog(this, "Conta deletada com sucesso\n" + numeroConta, "Deletar Conta", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Erro ao deletar a conta", "Deletar Conta", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void detalhes() {
        int selectedRow = tbContas.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Selecione uma conta para exibir detalhes.");
            return;
        }

        String numeroConta = tbContas.getValueAt(selectedRow, 0).toString();
        String tipoConta = tbContas.getValueAt(selectedRow, 2).toString();

        BancoContas banco = BancoContas.getBanco();
        Conta conta = banco.getContaByNumero(numeroConta);

        String detalhesConta = "";

        switch (tipoConta) {
            case "Conta Corrente" -> {
                ContaCorrente contaCorrente = (ContaCorrente) conta;
                detalhesConta = "Número da Conta: " + contaCorrente.getNumero() + "\n"
                        + "Agência: " + contaCorrente.getAgencia() + "\n"
                        + "Saldo: " + contaCorrente.getSaldo() + "\n"
                        + "Limite: " + contaCorrente.getLimite() + "\n"
                        + "Limite Disponível: " + contaCorrente.getLimiteDisponivel();
            }
            case "Conta Poupança" -> {
                ContaPoupanca contaPoupanca = (ContaPoupanca) conta;
                detalhesConta = "Número da Conta: " + contaPoupanca.getNumero() + "\n"
                        + "Agência: " + contaPoupanca.getAgencia() + "\n"
                        + "Saldo: " + contaPoupanca.getSaldo() + "\n"
                        + "Taxa de Juros: " + contaPoupanca.getJuros();
            }
            case "Conta Poupança Especial" -> {
                ContaPoupancaEspecial contaPoupancaEspecial = (ContaPoupancaEspecial) conta;
                detalhesConta = "Número da Conta: " + contaPoupancaEspecial.getNumero() + "\n"
                        + "Agência: " + contaPoupancaEspecial.getAgencia() + "\n"
                        + "Saldo: " + contaPoupancaEspecial.getSaldo() + "\n"
                        + "Taxa de Juros: " + contaPoupancaEspecial.getJuros() + "\n"
                        + "Limite de Crédito: " + contaPoupancaEspecial.getLimite();
            }
            default -> {
            }
        }

        JOptionPane.showMessageDialog(this, detalhesConta, "Detalhes da Conta", JOptionPane.INFORMATION_MESSAGE);
    }

    private void todasContas() {
        DefaultTableModel model = (DefaultTableModel) tbContas.getModel();
        model.setRowCount(0); // Limpa a tabela

        BancoContas banco = BancoContas.getBanco();
        List<ContaCorrente> contasCorrente = banco.getBdContasCorrente();
        List<ContaPoupanca> contasPoupanca = banco.getBdContasPoupanca();
        List<ContaPoupancaEspecial> contasPoupancaEspecial = banco.getBdContasPoupancaEspecial();

        boolean contaEncontrada = false;

        for (ContaCorrente conta : contasCorrente) {
            Object[] rowData = {conta.getNumero(), conta.getAgencia(), "Conta Corrente"};
            model.addRow(rowData);
            contaEncontrada = true;
        }

        for (ContaPoupanca conta : contasPoupanca) {
            Object[] rowData = {conta.getNumero(), conta.getAgencia(), "Conta Poupança"};
            model.addRow(rowData);
            contaEncontrada = true;
        }

        for (ContaPoupancaEspecial conta : contasPoupancaEspecial) {
            Object[] rowData = {conta.getNumero(), conta.getAgencia(), "Conta Poupança Especial"};
            model.addRow(rowData);
            contaEncontrada = true;
        }

        if (!contaEncontrada) {
            JOptionPane.showMessageDialog(this, "Nenhuma conta encontrada.");
        }
    }

    private void preencheTabelaCorrente() {
        DefaultTableModel model = (DefaultTableModel) tbContas.getModel();
        model.setRowCount(0);
        BancoContas banco = BancoContas.getBanco();
        List<ContaCorrente> contasCorrente = banco.getBdContasCorrente();

        boolean contaEncontrada = false;

        for (ContaCorrente conta : contasCorrente) {
            Object[] rowData = {conta.getNumero(), conta.getAgencia(), "Conta Corrente"};
            model.addRow(rowData);
            contaEncontrada = true;
        }

        if (!contaEncontrada) {
            JOptionPane.showMessageDialog(this, "Nenhuma conta corrente encontrada.");
        }
    }

    private void preencherTabelaPoupanca() {
        DefaultTableModel model = (DefaultTableModel) tbContas.getModel();
        model.setRowCount(0);

        BancoContas banco = BancoContas.getBanco();
        List<ContaPoupanca> contasPoupanca = banco.getBdContasPoupanca();

        boolean contaEncontrada = false;

        for (ContaPoupanca conta : contasPoupanca) {
            Object[] rowData = {conta.getNumero(), conta.getAgencia(), "Conta Poupança"};
            model.addRow(rowData);
            contaEncontrada = true;
        }

        if (!contaEncontrada) {
            JOptionPane.showMessageDialog(this, "Nenhuma conta poupança encontrada.");
        }
    }

    private void preeencherTabelaPoupancaEspecial() {
        DefaultTableModel model = (DefaultTableModel) tbContas.getModel();
        model.setRowCount(0);

        BancoContas banco = BancoContas.getBanco();
        List<ContaPoupancaEspecial> contasPoupancaEspecial = banco.getBdContasPoupancaEspecial();

        boolean contaEncontrada = false;

        for (ContaPoupancaEspecial conta : contasPoupancaEspecial) {
            Object[] rowData = {conta.getNumero(), conta.getAgencia(), "Conta Poupança Especial"};
            model.addRow(rowData);
            contaEncontrada = true;
        }

        if (!contaEncontrada) {
            JOptionPane.showMessageDialog(this, "Nenhuma conta poupança especial encontrada.");
        }
    }

    private void editarRegistro() {
        int linhaSelecionada = tbContas.getSelectedRow();
        String tipoConta = (String) tbContas.getValueAt(linhaSelecionada, 2);

        if (linhaSelecionada >= 0) {
            switch (tipoConta) {
                case "Conta Corrente" -> {
                    String numeroConta = (String) tbContas.getValueAt(linhaSelecionada, 0);
                    dispose();
                    EditarContaCorrente editarContaCorrente = new EditarContaCorrente();
                    editarContaCorrente.setVisible(true);
                    editarContaCorrente.carregamentoEdicao(numeroConta);
                }
                case "Conta Poupança" -> {
                    String numeroConta = (String) tbContas.getValueAt(linhaSelecionada, 0);
                    dispose();
                    EditarContaPoupanca editarContaPoupanca = new EditarContaPoupanca();
                    editarContaPoupanca.setVisible(true);
                    editarContaPoupanca.carregamentoEdicao(numeroConta);
                }
                case "Conta Poupança Especial" -> {
                    String numeroConta = (String) tbContas.getValueAt(linhaSelecionada, 0);
                    dispose();
                    EditarContaPoupancaEspecial editarContaPoupancaEspecial = new EditarContaPoupancaEspecial();
                    editarContaPoupancaEspecial.setVisible(true);
                    editarContaPoupancaEspecial.carregamentoEdicao(numeroConta);
                }
                default -> {
                }
            }
        }
    }

}
